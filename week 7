1



#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Function to print the path from source to destination
void printPath(vector<int>& parent, int v) {
    if (parent[v] == -1) {
        cout << v << " ";
        return;
    }
    printPath(parent, parent[v]);
    cout << v << " ";
}

// Function to find the shortest path using Dijkstra's algorithm
void dijkstra(vector<vector<int>>& graph, int source) {
    int numVertices = graph.size();
    vector<int> distance(numVertices, INT_MAX);
    vector<int> parent(numVertices, -1);
    vector<bool> visited(numVertices, false);

    distance[source] = 0;

    // Create a priority queue to store vertices and their distances
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push(make_pair(0, source));

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        visited[u] = true;

        for (int v = 0; v < numVertices; v++) {
            if (graph[u][v] != 0 && !visited[v]) {
                int weight = graph[u][v];
                if (distance[u] + weight < distance[v]) {
                    distance[v] = distance[u] + weight;
                    parent[v] = u;
                    pq.push(make_pair(distance[v], v));
                }
            }
        }
    }

    // Print the shortest path and distance from each friend's location to Akshay's house
    for (int i = 0; i < numVertices; i++) {
        if (i != source) {
            cout << "Shortest path from Friend " << i << " to Akshay's house: ";
            printPath(parent, i);
            cout << "with distance: " << distance[i] << endl;
        }
    }
}

int main() {
    int numVertices;
    cout << "Enter the number of vertices: ";
    cin >> numVertices;

    // Create an adjacency matrix to represent the graph
    vector<vector<int>> graph(numVertices, vector<int>(numVertices, 0));

    cout << "Enter the adjacency matrix: " << endl;
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            cin >> graph[i][j];
        }
    }

    int source;
    cout << "Enter Akshay's house vertex number: ";
    cin >> source;

    dijkstra(graph, source);

    return 0;
}






2



#include <iostream>
#include <vector>
#include <climits>

using namespace std;

// Function to print the path from source to destination
void printPath(vector<int>& parent, int v) {
    if (parent[v] == -1) {
        cout << v << " ";
        return;
    }
    printPath(parent, parent[v]);
    cout << v << " ";
}

// Function to find the shortest path using Bellman-Ford algorithm
void bellmanFord(vector<vector<int>>& graph, int source) {
    int numVertices = graph.size();
    vector<int> distance(numVertices, INT_MAX);
    vector<int> parent(numVertices, -1);

    distance[source] = 0;

    // Relax edges V-1 times
    for (int i = 0; i < numVertices - 1; i++) {
        for (int u = 0; u < numVertices; u++) {
            for (int v = 0; v < numVertices; v++) {
                if (graph[u][v] != 0 && distance[u] + graph[u][v] < distance[v]) {
                    distance[v] = distance[u] + graph[u][v];
                    parent[v] = u;
                }
            }
        }
    }

    // Check for negative-weight cycles
    for (int u = 0; u < numVertices; u++) {
        for (int v = 0; v < numVertices; v++) {
            if (graph[u][v] != 0 && distance[u] + graph[u][v] < distance[v]) {
                cout << "Negative-weight cycle detected!" << endl;
                return;
            }
        }
    }

    // Print the shortest path and distance from each friend's location to Akshay's house
    for (int i = 0; i < numVertices; i++) {
        if (i != source) {
            cout << "Shortest path from Friend " << i << " to Akshay's house: ";
            printPath(parent, i);
            cout << "with distance: " << distance[i] << endl;
        }
    }
}

int main() {
    int numVertices;
    cout << "Enter the number of vertices: ";
    cin >> numVertices;

    // Create an adjacency matrix to represent the graph
    vector<vector<int>> graph(numVertices, vector<int>(numVertices, 0));

    cout << "Enter the adjacency matrix: " << endl;
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            cin >> graph[i][j];
        }
    }

    int source;
    cout << "Enter Akshay's house vertex number: ";
    cin >> source;

    bellmanFord(graph, source);

    return 0;
}



3

#include <iostream>
#include <vector>
#include <climits>

using namespace std;

int shortestPathWithKEdges(vector<vector<int>>& graph, int source, int destination, int k) {
    int V = graph.size();
    vector<vector<int>> dp(V, vector<int>(k + 1, INT_MAX));

    dp[source][0] = 0;

    for (int edge = 1; edge <= k; edge++) {
        for (int u = 0; u < V; u++) {
            for (int v = 0; v < V; v++) {
                if (graph[u][v] != INT_MAX && dp[u][edge - 1] != INT_MAX) {
                    dp[v][edge] = min(dp[v][edge], dp[u][edge - 1] + graph[u][v]);
                }
            }
        }
    }

    if (dp[destination][k] != INT_MAX) {
        return dp[destination][k];
    } else {
        return -1;
    }
}

int main() {
    int V;
    cout << "Enter the number of vertices in the graph: ";
    cin >> V;

    vector<vector<int>> graph(V, vector<int>(V));

    cout << "Enter the adjacency matrix for the graph:" << endl;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }

    int source, destination, k;
    cout << "Enter the source vertex: ";
    cin >> source;

    cout << "Enter the destination vertex: ";
    cin >> destination;

    cout << "Enter the value of k: ";
    cin >> k;

    int shortestPathWeight = shortestPathWithKEdges(graph, source - 1, destination - 1, k);

    if (shortestPathWeight != -1) {
        cout << "Weight of shortest path from (" << source << "," << destination << ") with " << k << " edges: " << shortestPathWeight << endl;
    } else {
        cout << "No path of length " << k << " is available." << endl;
    }

    return 0;
}








